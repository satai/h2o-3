@Library('test-shared-library') _
import ai.h2o.ci.buildsummary.StagesSummary

DEFAULT_LABEL = 'mr-0xc10'

// initialize build summary
buildSummary('https://github.com/h2oai/h2o-3', true)
// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

properties([
    parameters([
        booleanParam(defaultValue: false, description: 'Build even if the image is already present in the repository', name: 'forceBuild'),
        booleanParam(defaultValue: false, description: 'Publish built images', name: 'publish'),
        string(defaultValue: 'master', description: 'H2O-3 Branch used to load dependencies.', name: 'h2oBranch')
    ])
])

IMAGE_NAME_PREFIX = 'harbor.h2o.ai/opsh2oai/h2o-3'

JDK_VERSIONS = ['8', '10', '11', '12', '13']
OPENJDK_VERSIONS = ['7']
PYTHON_VERSIONS = ['2.7', '3.5', '3.6', '3.7', '3.8']
R_VERSION = ['3.4.1', '3.3.3', '3.5.3', '3.6.2']

def pipelineContext

ansiColor('xterm') {
    timestamps {
        def checkoutStageName = 'Checkout and Init'
        buildSummary.stageWithSummary(checkoutStageName) {
            node (DEFAULT_LABEL) {
                buildSummary.refreshStage(checkoutStageName)
                cleanWs()
                def scmEnv = checkout scm

                def final pipelineContextFactory = load('scripts/jenkins/groovy/pipelineContext.groovy')
                pipelineContext = pipelineContextFactory('.', 'MODE_BUILD_DOCKER', scmEnv, true)
                def currentVersion = pipelineContext.getBuildConfig().getDefaultImageVersion()
                currentBuild.displayName = "v${currentVersion} #${currentBuild.number}"

                if (params.publish && !params.forceBuild) {
                    if (pipelineContext.getUtils().dockerImageExistsInRegistry(this, 'harbor.h2o.ai', 'opsh2oai/h2o-3/dev-base', "${currentVersion}")) {
                        error "Image already exists. Use forceBuild if you wish to overwrite."
                    }
                } else {
                    manager.addBadge("warning.gif", "forceBuild enabled")
                }

                dir('docker') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS S3 Credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        docker.image('harbor.h2o.ai/opsh2oai/s3cmd').inside("-e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}") {
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-8/x64-linux/jdk1.8.0_171.zip"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-10/x64-linux/jdk-10.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-11/x64-linux/jdk-11.0.3_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-12/x64-linux/jdk-12.0.2_linux-x64_bin.tar.gz"
                        }
                    }
                    stash name: 'docker-sources'
                }
            }
        }

        def gradleVersion = pipelineContext.getBuildConfig().getCurrentGradleVersion()
        buildInParallel(pipelineContext, ['dev-base'])
        buildInParallel(pipelineContext, ['dev-jdk-8-base', 'dev-jdk-others-base'])
        buildInParallel(pipelineContext, ['dev-python-base', 'dev-r-base'])

        def componentImages = []
        PYTHON_VERSIONS.each {version ->
            componentImages += "dev-python-${version}"
        }
        R_VERSION.each {version ->
            componentImages += "dev-r-${version}"
        }
        JDK_VERSIONS.each {version ->
            componentImages += "dev-jdk-${version}"
        }
        OPENJDK_VERSIONS.each {version ->
            componentImages += "dev-openjdk-${version}"
        }
        componentImages += "dev-mojocompat"
        buildInParallel(pipelineContext, componentImages)

        buildInParallel(pipelineContext, ["dev-build-base"])
        buildInParallel(pipelineContext, ["dev-build-gradle"], gradleVersion)
        buildInParallel(pipelineContext, ["dev-build-hadoop-gradle"], gradleVersion)
        buildInParallel(pipelineContext, ["dev-release-gradle"], gradleVersion)

        def componentJdkImages = []
        PYTHON_VERSIONS.each {version ->
            JDK_VERSIONS.each {jdkVersion ->
                componentJdkImages += "dev-python-${version}-jdk-${jdkVersion}"
            }
            OPENJDK_VERSIONS.each {jdkVersion ->
                componentJdkImages += "dev-python-${version}-openjdk-${jdkVersion}"
            }
        }
        R_VERSION.each {version ->
            JDK_VERSIONS.each {jdkVersion ->
                componentJdkImages += "dev-r-${version}-jdk-${jdkVersion}"
            }
            OPENJDK_VERSIONS.each {jdkVersion ->
                componentJdkImages += "dev-r-${version}-openjdk-${jdkVersion}"
            }
        }
        buildInParallel(pipelineContext, componentJdkImages)
    }
}

private buildInParallel(final pipelineContext, final targets, final gradleVersion = null) {
    parallel(targets.collectEntries { target ->
        [
                (target): makeStage(pipelineContext, target, false, gradleVersion),
                ("$target-gpu"): makeStage(pipelineContext, target, true, gradleVersion)
        ]
    })
}

private Closure makeStage(final pipelineContext, String target, final boolean useGpu, final String gradleVersion) {
    return {
        if (gradleVersion != null) {
            target = "$target-$gradleVersion"
        }
        def buildImageStageName = "Build $target"
        if (useGpu) {
            buildImageStageName = "$buildImageStageName GPU"
        }
        buildSummary.stageWithSummary(buildImageStageName) {
            node (DEFAULT_LABEL) {
                buildSummary.refreshStage(buildImageStageName)
                dir (target) {
                    deleteDir()
                    unstash 'docker-sources'
                    pullPreviousVersionIfRequired(pipelineContext, target)
                    sh """
                                make \
                                    H2O_BRANCH=${params.h2oBranch} \
                                    VERSION=${pipelineContext.getBuildConfig().getDefaultImageVersion()} \
                                    GRADLE_VERSION=${gradleVersion} \
                                    GPU=${useGpu} \
                                    PUSH=${params.publish} \
                                    ${target}
                            """
                }
            }
        }
    }
}

def pullPreviousVersionIfRequired(final pipelineContext, final String image) {
    def previousVersion = pipelineContext.getBuildConfig().getDefaultImageVersion() - 1
    // hack for first version of image
    if (previousVersion <= 0) {
        previousVersion = 1
    }
    if (pipelineContext.getUtils().dockerImageExistsInRegistry(this, 'harbor.h2o.ai', "opsh2oai/h2o-3/${image}", "${previousVersion}")) {
        retryWithDelay(3 /* retries */, 120 /* delay in sec */) {
            sh "docker pull ${IMAGE_NAME_PREFIX}/${image}:${previousVersion}"
        }
    }
}
